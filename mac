#!/bin/sh

# Welcome to the Washington Post laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

set -e

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}
HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
  curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
  append_to_zshrc '# recommended by brew doctor'
  # shellcheck disable=SC2016
  append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1
  export PATH="/usr/local/bin:$PATH"
fi

fancy_echo "Updating Homebrew formulae ..."
brew update
brew doctor || true
brew outdated
brew info --installed --json=v1
brew bundle --file=- <<EOF || true
tap 'homebrew/services'
tap 'caskroom/cask'
tap 'caskroom/versions'
tap 'nodenv/nodenv'

# general dependencies
brew 'openssl'
cask 'java' unless system '/usr/libexec/java_home --failfast > /dev/null'

# cli tools
brew 'awscli' # aws command line tools
brew 'wget' # super curl
brew 'jq' # command line json processor
brew 'tree' # recursive ls
brew 'jsonpp' # pretty print json
brew 'zsh' # better shell

# databases, key value stores
brew 'mongodb', restart_service: :changed
brew 'mysql', restart_service: :changed
brew 'postgresql', restart_service: :changed
brew 'redis', restart_service: :changed

# languages
brew 'python'
brew 'pyenv'

brew 'node'
brew 'node-build'
brew 'nodenv'
brew 'yarn' # alternative to npm

brew 'ruby'
brew 'ruby-build'
brew 'rbenv'

# dev gui
cask 'iterm2' unless File.directory?("/Applications/iTerm.app")
cask 'docker' unless File.directory?("/Applications/Docker.app")
cask 'sublime-text' unless File.directory?("/Applications/Sublime Text.app")
cask 'visual-studio-code' unless File.directory?("/Applications/Visual Studio Code.app.app")

# non-dev gui
cask 'slack' unless File.directory?("/Applications/Slack.app")
cask 'google-chrome-beta' unless File.directory?("/Applications/Google Chrome.app")
cask 'keepingyouawake' unless File.directory?("/Applications/KeepingYouAwake.app")
EOF

fancy_echo "Configuring Zsh ..."

shell_path=/usr/local/bin/zsh

if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
  fancy_echo "Adding '$shell_path' to /etc/shells"
  sudo sh -c "echo $shell_path >> /etc/shells"
fi

REALSHELL=$(dscl . -read "/Users/$USER/" UserShell | awk '{ print $2 }')
if [ "$REALSHELL" != "$shell_path" ]; then
  fancy_echo "Changing your shell from $SHELL to $shell_path ..."
  sudo chsh -s "$shell_path" "$USER"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

fancy_echo "Done Configuring Zsh!"
fancy_echo "Configuring Ruby ..."

find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

ruby_version="$(find_latest_ruby)"
# shellcheck disable=SC2016
append_to_zshrc 'eval "$(rbenv init - --no-rehash)"' 1
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  if [ "$CI" == "true" ]; then
    ruby_version="2.5.1" # hardcode latest from http://rubies.travis-ci.org/
    wget "http://rubies.travis-ci.org/osx/10.12/x86_64/ruby-$ruby_version.tar.bz2"
    tar -xf "ruby-$ruby_version.tar.bz2"
    mv "ruby-$ruby_version" "$HOME/.rbenv/versions/$ruby_version"
  else
    RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
  fi
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"
gem update --system
gem_install_or_update 'bundler'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Done Configuring Ruby!"
fancy_echo "Configuring Python ..."

find_latest_python2() {
  pyenv install -l | grep -v - | grep "  2." | tail -1 | sed -e 's/^ *//'
}

find_latest_python3() {
  pyenv install -l | grep -v - | grep "  3." | tail -1 | sed -e 's/^ *//'
}

# shellcheck disable=SC2016
append_to_zshrc 'eval "$(pyenv init - --no-rehash)"' 1
eval "$(pyenv init -)"

python2_version="$(find_latest_python2)"
if ! pyenv versions | grep -Fq "$python2_version"; then
  fancy_echo "Installing Python $python2_version ..."
  CFLAGS=-I/usr/local/opt/openssl/include LDFLAGS=-L/usr/local/opt/openssl/lib pyenv install -s "$python2_version"
fi
pyenv shell "$python2_version"
pip install -q pipenv envdir

python3_version="$(find_latest_python3)"
if ! pyenv versions | grep -Fq "$python3_version"; then
  fancy_echo "Installing Python $python3_version ..."
  CFLAGS=-I/usr/local/opt/openssl/include LDFLAGS=-L/usr/local/opt/openssl/lib pyenv install -s "$python3_version"
fi
pyenv shell "$python3_version"
pip install -q pipenv envdir

pyenv global "$python3_version:$python2_version"

fancy_echo "Done Configuring Python!"
fancy_echo "Configuring Node ..."

find_latest_node() {
  latest_major_version="8"
  nodenv install -l | grep -v - | grep "  $latest_major_version." | tail -1 | sed -e 's/^ *//'
}

# shellcheck disable=SC2016
append_to_zshrc 'eval "$(nodenv init - --no-rehash)"' 1
eval "$(nodenv init -)"

node_version="$(find_latest_node)"

if ! nodenv versions | grep -Fq "$node_version"; then
  nodenv install -v "$node_version"
fi
nodenv shell "$node_version"
nodenv global "$node_version"

fancy_echo "Done Configuring Node!"
fancy_echo "Configuring Postgres ..."

createuser --superuser --createdb --createrole --replication postgres || echo "postgres user already exists"
createuser --superuser --createdb --createrole --replication root || echo "root user already exists"

fancy_echo "Done Configuring Laptop!"
