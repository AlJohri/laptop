#!/bin/sh

set -e

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}
HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
  curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
  append_to_zshrc '# recommended by brew doctor'
  # shellcheck disable=SC2016
  append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1
  export PATH="/usr/local/bin:$PATH"
fi

fancy_echo "Updating Homebrew formulae ..."
brew bundle --file=- <<EOF || true
tap 'homebrew/services'
tap 'caskroom/cask'
tap 'caskroom/versions'

# general dependencies
brew 'openssl'
cask 'adoptopenjdk8' unless system '/usr/libexec/java_home --failfast > /dev/null'

# cli tools
brew 'mas' # mac app store installer
brew 'hub' # git
brew 'awscli' # aws command line tools
brew 'awslogs' # view aws cloudwatch logs from CLI
brew 'wget' # super curl
brew 'jq' # command line json processor
brew 'tree' # recursive ls
brew 'zsh' # better shell
brew 'pre-commit' # for git commit hooks
brew 'ripgrep' # search through text files fast

# databases, key value stores
brew 'mongodb', restart_service: :changed
brew 'mysql', restart_service: :changed
brew 'postgresql', restart_service: :changed
brew 'redis', restart_service: :changed
brew 'flyway' # database migrations

# python + python tools
brew 'python'
brew 'pipenv'
brew 'pipx'

# other languages
brew 'node'
brew 'yarn'
brew 'ruby'

# dev cask
cask 'iterm2' unless File.directory?("/Applications/iTerm.app")
cask 'docker' unless File.directory?("/Applications/Docker.app")
cask 'sublime-text' unless File.directory?("/Applications/Sublime Text.app")
cask 'visual-studio-code' unless File.directory?("/Applications/Visual Studio Code.app.app")
cask 'r'
cask 'rstudio'
cask 'iterative/dvc/dvc'
cask '1password-cli'

# non-dev cask
cask 'slack' unless File.directory?("/Applications/Slack.app")
cask 'google-chrome-beta' unless File.directory?("/Applications/Google Chrome.app")
cask 'keepingyouawake' unless File.directory?("/Applications/KeepingYouAwake.app")

# mac apps
mas '1Password 7', id: 1333542190
EOF

fancy_echo "Configuring Zsh ..."

shell_path=/usr/local/bin/zsh

if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
  fancy_echo "Adding '$shell_path' to /etc/shells"
  sudo sh -c "echo $shell_path >> /etc/shells"
fi

REALSHELL=$(dscl . -read "/Users/$USER/" UserShell | awk '{ print $2 }')
if [ "$REALSHELL" != "$shell_path" ]; then
  fancy_echo "Changing your shell from $SHELL to $shell_path ..."
  sudo chsh -s "$shell_path" "$USER"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

fancy_echo "Done Configuring Zsh!"
fancy_echo "Configuring Postgres ..."

createuser --superuser --createdb --createrole --replication postgres || echo "postgres user already exists"
createuser --superuser --createdb --createrole --replication root || echo "root user already exists"

fancy_echo "Done Configuring Postgres!"

fancy_echo "Done Configuring Laptop!"
